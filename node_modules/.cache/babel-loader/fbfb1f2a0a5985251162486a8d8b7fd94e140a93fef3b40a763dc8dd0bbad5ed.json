{"ast":null,"code":"var _jsxFileName = \"/home/addo/Development/code/code-challenges/Bank-Of-Flatiron1/src/components/Account.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Transactionlist from \"./Transactionlist\";\nimport Search from \"./Search\";\nimport AddTransaction from \"./AddTransaction\";\nimport \"../stylesheets/App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Account = () => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [filteredTransactions, setFilteredTransactions] = useState([]);\n  useEffect(() => {\n    // Fetch transactions from db.json when the component mounts\n    fetch(\"http://localhost:8001/transactions\").then(response => response.json()).then(data => {\n      console.log(\"Fetched data:\", data); // Log the fetched data\n      setTransactions(data.transactions);\n      setFilteredTransactions(data.transactions); // Initialize filteredTransactions with all transactions\n    }).catch(error => {\n      console.error(\"Error fetching transactions:\", error);\n    });\n  }, []);\n  useEffect(() => {\n    // Filter transactions based on search text\n    const filteredData = transactions.filter(transaction => {\n      return transaction.description.toLowerCase().includes(search.toLowerCase());\n    });\n\n    // Update filteredTransactions state with the filtered data\n    setFilteredTransactions(filteredData);\n  }, [search, transactions]);\n  const addTransaction = newTransaction => {\n    const newId = Math.max(...transactions.map(transaction => transaction.id)) + 1;\n    const transactionWithId = {\n      ...newTransaction,\n      id: newId\n    };\n    setTransactions(prevTransactions => [...prevTransactions, transactionWithId]);\n    if (transactionWithId.description.toLowerCase().includes(search.toLowerCase())) {\n      setFilteredTransactions(prevFilteredTransactions => [...prevFilteredTransactions, transactionWithId]);\n    }\n  };\n  const deleteTransaction = transactionId => {\n    setTransactions(prevTransactions => prevTransactions.filter(transaction => transaction.id !== transactionId));\n    setFilteredTransactions(prevFilteredTransactions => prevFilteredTransactions.filter(transaction => transaction.id !== transactionId));\n  };\n  const handleSelect = option => {\n    switch (option) {\n      case \"descriptionUP\":\n        setFilteredTransactions([...filteredTransactions].sort((a, b) => a.description.localeCompare(b.description)));\n        break;\n      case \"descriptionDOWN\":\n        setFilteredTransactions([...filteredTransactions].sort((a, b) => b.description.localeCompare(a.description)));\n        break;\n      case \"categoryUP\":\n        setFilteredTransactions([...filteredTransactions].sort((a, b) => a.category.localeCompare(b.category)));\n        break;\n      case \"categoryDOWN\":\n        setFilteredTransactions([...filteredTransactions].sort((a, b) => b.category.localeCompare(a.category)));\n        break;\n      case \"amountUP\":\n        setFilteredTransactions([...filteredTransactions].sort((a, b) => a.amount - b.amount));\n        break;\n      case \"amountDOWN\":\n        setFilteredTransactions([...filteredTransactions].sort((a, b) => b.amount - a.amount));\n        break;\n      case \"dateUP\":\n        setFilteredTransactions([...filteredTransactions].sort((a, b) => new Date(a.date) - new Date(b.date)));\n        break;\n      case \"dateDOWN\":\n        setFilteredTransactions([...filteredTransactions].sort((a, b) => new Date(b.date) - new Date(a.date)));\n        break;\n      default:\n        // If the option is \"all\" or invalid, set the transactions as they are\n        setFilteredTransactions([...transactions]);\n        break;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      searchValue: search,\n      searchFun: setSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddTransaction, {\n      addTransactionFun: addTransaction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Transactionlist, {\n      transactions: filteredTransactions,\n      deleteTransactionFun: deleteTransaction,\n      select: \"\" // Provide an initial value for the 'select' prop\n      ,\n      selectFun: handleSelect // Provide the function for handling sorting option selection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(Account, \"3KnAwJM+0gi8bs1UrZRyZnoUikU=\");\n_c = Account;\nexport default Account;\nvar _c;\n$RefreshReg$(_c, \"Account\");","map":{"version":3,"names":["React","useState","useEffect","Transactionlist","Search","AddTransaction","jsxDEV","_jsxDEV","Account","_s","transactions","setTransactions","search","setSearch","filteredTransactions","setFilteredTransactions","fetch","then","response","json","data","console","log","catch","error","filteredData","filter","transaction","description","toLowerCase","includes","addTransaction","newTransaction","newId","Math","max","map","id","transactionWithId","prevTransactions","prevFilteredTransactions","deleteTransaction","transactionId","handleSelect","option","sort","a","b","localeCompare","category","amount","Date","date","children","searchValue","searchFun","fileName","_jsxFileName","lineNumber","columnNumber","addTransactionFun","deleteTransactionFun","select","selectFun","_c","$RefreshReg$"],"sources":["/home/addo/Development/code/code-challenges/Bank-Of-Flatiron1/src/components/Account.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Transactionlist from \"./Transactionlist\";\nimport Search from \"./Search\";\nimport AddTransaction from \"./AddTransaction\";\nimport \"../stylesheets/App.css\";\n\nconst Account = () => {\n  const [transactions, setTransactions] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [filteredTransactions, setFilteredTransactions] = useState([]);\n\n  useEffect(() => {\n    // Fetch transactions from db.json when the component mounts\n    fetch(\"http://localhost:8001/transactions\")\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(\"Fetched data:\", data); // Log the fetched data\n        setTransactions(data.transactions);\n        setFilteredTransactions(data.transactions); // Initialize filteredTransactions with all transactions\n      })\n      .catch((error) => {\n        console.error(\"Error fetching transactions:\", error);\n      });\n  }, []);\n  \n\n  useEffect(() => {\n    // Filter transactions based on search text\n    const filteredData = transactions.filter((transaction) => {\n      return transaction.description.toLowerCase().includes(search.toLowerCase());\n    });\n\n    // Update filteredTransactions state with the filtered data\n    setFilteredTransactions(filteredData);\n  }, [search, transactions]);\n\n  const addTransaction = (newTransaction) => {\n    const newId = Math.max(...transactions.map((transaction) => transaction.id)) + 1;\n    const transactionWithId = { ...newTransaction, id: newId };\n\n    setTransactions((prevTransactions) => [...prevTransactions, transactionWithId]);\n\n    if (transactionWithId.description.toLowerCase().includes(search.toLowerCase())) {\n      setFilteredTransactions((prevFilteredTransactions) => [\n        ...prevFilteredTransactions,\n        transactionWithId,\n      ]);\n    }\n  };\n\n  const deleteTransaction = (transactionId) => {\n    setTransactions((prevTransactions) =>\n      prevTransactions.filter((transaction) => transaction.id !== transactionId)\n    );\n\n    setFilteredTransactions((prevFilteredTransactions) =>\n      prevFilteredTransactions.filter((transaction) => transaction.id !== transactionId)\n    );\n  };\n\n  const handleSelect = (option) => {\n    switch (option) {\n      case \"descriptionUP\":\n        setFilteredTransactions([...filteredTransactions].sort((a, b) => a.description.localeCompare(b.description)));\n        break;\n      case \"descriptionDOWN\":\n        setFilteredTransactions([...filteredTransactions].sort((a, b) => b.description.localeCompare(a.description)));\n        break;\n      case \"categoryUP\":\n        setFilteredTransactions([...filteredTransactions].sort((a, b) => a.category.localeCompare(b.category)));\n        break;\n      case \"categoryDOWN\":\n        setFilteredTransactions([...filteredTransactions].sort((a, b) => b.category.localeCompare(a.category)));\n        break;\n      case \"amountUP\":\n        setFilteredTransactions([...filteredTransactions].sort((a, b) => a.amount - b.amount));\n        break;\n      case \"amountDOWN\":\n        setFilteredTransactions([...filteredTransactions].sort((a, b) => b.amount - a.amount));\n        break;\n      case \"dateUP\":\n        setFilteredTransactions([...filteredTransactions].sort((a, b) => new Date(a.date) - new Date(b.date)));\n        break;\n      case \"dateDOWN\":\n        setFilteredTransactions([...filteredTransactions].sort((a, b) => new Date(b.date) - new Date(a.date)));\n        break;\n      default:\n        // If the option is \"all\" or invalid, set the transactions as they are\n        setFilteredTransactions([...transactions]);\n        break;\n    }\n  };\n  \n\n  return (\n    <div>\n      {/* Search component */}\n      <Search searchValue={search} searchFun={setSearch} />\n\n      {/* AddTransaction component */}\n      <AddTransaction addTransactionFun={addTransaction} />\n\n      {/* Transactionlist component */}\n      <Transactionlist\n        transactions={filteredTransactions}\n        deleteTransactionFun={deleteTransaction}\n        select={\"\"} // Provide an initial value for the 'select' prop\n        selectFun={handleSelect} // Provide the function for handling sorting option selection\n      />\n    </div>\n  );\n};\n\nexport default Account;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}